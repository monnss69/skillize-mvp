# SKILLIZE MVP - COMPREHENSIVE CODEBASE DOCUMENTATION

## 1. OVERVIEW

### Purpose and Problem Statement
Skillize MVP is a personalized AI scheduler application designed to help users efficiently manage their time and events. The primary problems it solves are:

1. **Calendar Management**: Provides a modern, intuitive interface for scheduling and managing events
2. **Google Calendar Integration**: Offers seamless two-way synchronization with Google Calendar
3. **Authentication & User Management**: Secure user account system with multiple authentication methods
4. **Personalized Event Management**: Customizable event creation and management

The application is built as a web-based solution using Next.js 15 with the App Router pattern, offering a responsive, modern UI with a distinctive dark theme styling.

### Core Functionality
The application works by:
1. Providing user authentication via email/password or Google OAuth
2. Offering a calendar interface for creating, viewing, and managing events
3. Connecting with external calendar services (primarily Google Calendar)
4. Storing user data and events in a Supabase database
5. Implementing server actions for secure data mutations

## 2. ARCHITECTURE

### Main Components
The application follows a modern React-based architecture with these main components:

1. **Authentication System**
   - NextAuth.js for auth provider integration
   - Credential and OAuth authentication flows
   - Token refresh mechanisms

2. **Calendar Interface**
   - Week view calendar grid
   - Event creation and management
   - Recurrence handling
   - Time zone support

3. **Google Calendar Integration**
   - OAuth connection
   - Two-way synchronization
   - Token management

4. **Database Integration**
   - Supabase for data storage
   - User profiles
   - Event data

5. **UI Framework**
   - Tailwind CSS with custom theming
   - shadcn/ui component library
   - Responsive design

### Component Interactions
```
┌─────────────────┐     ┌───────────────────┐     ┌───────────────────┐
│                 │     │                   │     │                   │
│  Client UI      │◄────┤  NextJS App Router│◄────┤  Server Actions   │
│  Components     │     │  (Pages & API)    │     │  & API Routes     │
│                 │     │                   │     │                   │
└────────┬────────┘     └─────────┬─────────┘     └────────┬──────────┘
         │                        │                        │
         │                        │                        │
         │                        ▼                        │
         │              ┌─────────────────┐               │
         │              │                 │               │
         └──────────────┤  State          ├───────────────┘
                        │  Management     │
                        │  (React Query)  │
                        └────────┬────────┘
                                 │
                                 ▼
                        ┌─────────────────┐     ┌───────────────────┐
                        │                 │     │                   │
                        │  Supabase       │◄────┤  Google Calendar  │
                        │  Database       │     │  API              │
                        │                 │     │                   │
                        └─────────────────┘     └───────────────────┘
```

## 3. COMPONENT ANALYSIS

### Authentication System

#### Operation Flow
1. User initiates login/signup via UI
2. Credentials are validated or OAuth flow is initiated
3. User identity is verified
4. Session is created and stored
5. Auth tokens are managed, including refresh cycles

#### Entry/Exit Points
- Entry: Login/Signup forms, OAuth buttons
- Exit: JWT token issuance, session creation

#### Key Decision Paths
- Credential validation path: Password verification, account lookup
- OAuth path: Provider redirect, token exchange, account linking
- Session management: Token verification, refresh cycles

### Calendar System

#### Operation Flow
1. Calendar grid renders based on selected date range
2. Events are fetched from database and/or Google Calendar
3. Events are processed (including recurring event expansion)
4. Calendar UI renders events in appropriate time slots
5. User interactions trigger event creation, editing, or deletion

#### Entry/Exit Points
- Entry: Calendar page load, date selection, view changes
- Exit: Event rendering, API calls for data modifications

#### Key Decision Paths
- Event retrieval: Local vs. Google Calendar events
- Recurrence handling: Event expansion based on recurrence rules
- Time slot allocation: Determining visual placement of events

### Google Calendar Integration

#### Operation Flow
1. User initiates Google connection via UI
2. OAuth flow requests calendar access permissions
3. Access and refresh tokens are stored securely
4. Calendar sync operations fetch/push events between systems
5. Token refresh is handled automatically when needed

#### Entry/Exit Points
- Entry: Connect button, sync operations
- Exit: Successful OAuth connection, calendar data sync

#### Key Decision Paths
- Authentication state: Connected vs. disconnected
- Sync direction: Push to Google, pull from Google, or bidirectional
- Token management: Refresh cycles, expired token handling

### UI Component System

#### Operation Flow
1. Layout components establish page structure
2. Content components render based on data and state
3. User interactions trigger state changes and/or server actions
4. Responsive adaptations occur based on device/viewport

#### Entry/Exit Points
- Entry: User interactions, data changes
- Exit: Rendered UI, action triggers

#### Key Decision Paths
- Component rendering: Server vs. client components
- State updates: Local state vs. global state management
- Form validation: Input validation and error handling

## 4. FILE RELATIONSHIPS

### Import/Export Dependencies

The application uses a structured import/export pattern:
- **UI Components**: Import from component libraries and export composed components
- **Data Hooks**: Import API utilities and export data access hooks
- **Server Actions**: Import database utilities and export action functions
- **Types**: Shared across the application for type safety

Key import chains:
1. UI → Hooks → Server Actions → Database
2. Pages → Components → Utilities → Types
3. API Routes → Auth Config → Database

### Cross-File Function Calls

Major cross-file function relationships:
- Authentication components call auth API functions
- Calendar components call calendar utility functions and server actions
- Form components call validation functions and server actions

### Data Flow

```
┌─────────────┐     ┌─────────────┐     ┌─────────────┐
│             │     │             │     │             │
│  UI Forms   │────►│Server Actions│────►│  Database   │
│             │     │             │     │             │
└─────────────┘     └─────────────┘     └─────────────┘
       ▲                                       │
       │                                       │
       │            ┌─────────────┐            │
       │            │             │            │
       └────────────┤  API Routes ◄────────────┘
                    │             │
                    └─────────────┘
                          ▲
                          │
                    ┌─────┴─────┐
                    │           │
                    │External   │
                    │APIs       │
                    │           │
                    └───────────┘
```

## 5. SERVICE ANALYSIS

### Authentication Service

#### Purpose
Manages user identity, account creation, login, and session management

#### Key Functions
- `signUp`: User registration with email/password
- `signIn`: User authentication with credentials or OAuth
- `refreshToken`: Handles token refresh for continued session validity
- `getUserSession`: Retrieves current user session data

#### Dependencies
- NextAuth.js
- Supabase Auth
- bcryptjs (for password hashing)
- API routes for auth operations

#### Notable Algorithms
- Password hashing and verification
- JWT token generation and validation
- OAuth flow management

### Calendar Service

#### Purpose
Manages calendar events, views, and synchronization

#### Key Functions
- `createEvent`: Creates new calendar events
- `updateEvent`: Modifies existing events
- `deleteEvent`: Removes events
- `getEvents`: Retrieves events for a given time period
- `syncWithGoogle`: Synchronizes events with Google Calendar

#### Dependencies
- Supabase database
- Google Calendar API
- date-fns (date manipulation)
- luxon (time zone handling)

#### Notable Algorithms
- Recurrence rule parsing and event expansion
- Calendar view calculations
- Time slot allocation for visual rendering

### Google Integration Service

#### Purpose
Manages connection to Google services and data synchronization

#### Key Functions
- `connectGoogle`: Establishes Google OAuth connection
- `disconnectGoogle`: Removes Google connection
- `refreshGoogleToken`: Refreshes Google OAuth tokens
- `syncGoogleEvents`: Synchronizes events with Google Calendar

#### Dependencies
- Google APIs
- NextAuth.js
- Supabase (for token storage)

#### Notable Algorithms
- OAuth flow management
- Differential sync (determining which events to update)
- Token refresh timing

### User Preferences Service

#### Purpose
Manages user-specific settings and preferences

#### Key Functions
- `getUserPreferences`: Retrieves user preferences
- `updateUserPreferences`: Modifies user settings
- `applyThemePreferences`: Applies theme settings to UI

#### Dependencies
- Supabase database
- Context API for state sharing

#### Notable Algorithms
- Theme application logic
- User settings storage and retrieval

## 6. DIRECTORY STRUCTURE

The application follows a domain-driven directory structure:

```
skillize-mvp/
├── src/
│   ├── app/                  # App router pages and layout
│   │   ├── api/              # API routes
│   │   │   ├── auth/         # Authentication endpoints
│   │   │   ├── events/       # Event management endpoints
│   │   │   ├── google/       # Google integration endpoints
│   │   │   └── users/        # User management endpoints
│   │   ├── calendar/         # Calendar page
│   │   ├── login/            # Login page
│   │   ├── settings/         # Settings pages
│   │   ├── signup/           # Signup page
│   │   ├── layout.tsx        # Root layout
│   │   └── page.tsx          # Home page
│   ├── components/           # React components
│   │   ├── calendar/         # Calendar specific components
│   │   │   └── week-view/    # Week view calendar components
│   │   ├── login-form/       # Login form components
│   │   ├── signup-form/      # Signup form components
│   │   ├── ui/               # Reusable UI components
│   │   ├── google/           # Google integration components
│   │   ├── settings/         # Settings components
│   │   └── providers/        # Context providers
│   ├── contexts/             # React contexts
│   ├── hooks/                # Custom React hooks
│   ├── lib/                  # Utility functions and modules
│   │   ├── actions/          # Server actions
│   │   ├── auth/             # Authentication utilities
│   │   ├── calendar/         # Calendar utilities
│   │   └── supabase/         # Supabase client utilities
│   ├── styles/               # Global styles
│   └── types/                # TypeScript type definitions
```

### Organization Principles

1. **Feature-Based Organization**: Components and utilities are organized by feature domain (calendar, auth, etc.)
2. **Component Nesting**: Components are nested by specificity (ui → calendar → week-view)
3. **Type Separation**: TypeScript types are centralized in a dedicated directory
4. **Utility Grouping**: Utility functions are grouped by purpose in the lib directory
5. **API Route Structure**: API routes follow a RESTful design pattern
6. **Context Isolation**: State management contexts are separated by domain

## 7. CONCLUSION

Skillize MVP is a well-structured Next.js 15 application that leverages modern web technologies to provide a comprehensive calendar and scheduling solution. The codebase demonstrates best practices in:

1. **Modern React Patterns**: Using the latest React features including Server Components
2. **Type Safety**: Comprehensive TypeScript usage throughout
3. **API Design**: Clean, RESTful API endpoints
4. **Authentication**: Secure, multi-provider authentication
5. **State Management**: Efficient state management with React Query and Zustand
6. **UI Component Architecture**: Reusable, composable UI components
7. **External Service Integration**: Clean integration with Google Calendar

The architecture balances client and server responsibilities, leveraging server-side rendering where beneficial while maintaining responsive client interactions. The domain-driven structure makes the codebase maintainable and extensible as new features are added. 