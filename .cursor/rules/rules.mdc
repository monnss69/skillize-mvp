---
description: For every request! Remember these information and integrate them into your answer.
globs: 
alwaysApply: false
---
NOTES: ALWAYS ADD COMMENT TO THE CODE, NEVER FORGET THIS. ALWAYS ADD COMMENT TO EXPLAIN THE CODE.

USING Shadcn or radix UI component as much as possible. USE pnpm as the core package manager

/**
 * Database Schema Definitions
 */
export const DATABASE_SCHEMA = {
  users: {
    id: 'uuid PRIMARY KEY',
    email: 'varchar UNIQUE NOT NULL',
    username: 'varchar',
    password_hash: 'varchar',
    auth_type: 'varchar',
    google_id: 'varchar',
    timezone: 'varchar',
    created_at: 'timestamp DEFAULT now()',
    updated_at: 'timestamp DEFAULT now()',
    email_verified: 'boolean DEFAULT false',
    avatar_url: 'text'
  },
  
  events: {
    id: string;
    user_id: string;
    title: string;
    description: string | null;
    start_time: string; // ISO timestamp
    end_time: string;   // ISO timestamp
    color: string | null;
    is_completed: boolean;
    recurrence_rule: string | null;      // RRULE string (e.g., "FREQ=WEEKLY;COUNT=10")
    recurrence_exception_dates: string[] | null; // Dates when events are modified/deleted
    is_recurring: boolean;               // Whether this is a recurring event
    recurrence_id: string | null;        // Series identifier
    created_at: string;
    updated_at: string;
  },

  calendars: {
    id: 'uuid PRIMARY KEY',
    user_id: 'uuid REFERENCES users(id)',
    title: 'varchar NOT NULL',
    color: 'varchar',
    is_primary: 'boolean DEFAULT false',
    created_at: 'timestamp DEFAULT now()',
    updated_at: 'timestamp DEFAULT now()'
  },

  courses: {
    id: 'uuid PRIMARY KEY',
    title: 'varchar NOT NULL',
    description: 'text',
    duration: 'interval',
    difficulty_level: 'varchar',
    estimated_completion_time: 'interval',
    created_at: 'timestamp DEFAULT now()',
    updated_at: 'timestamp DEFAULT now()',
    user_id: 'uuid REFERENCES users(id)'
  },

  oauth_connections: {
    id: 'uuid PRIMARY KEY',
    user_id: 'uuid REFERENCES users(id)',
    provider: 'varchar NOT NULL',
    access_token: 'varchar',
    refresh_token: 'varchar',
    expires_at: 'timestamp',
    calendar_sync_enabled: 'boolean DEFAULT false',
    last_synced_at: 'timestamp',
    created_at: 'timestamp DEFAULT now()',
    updated_at: 'timestamp DEFAULT now()',
    email: 'text',
    profile_data: 'jsonb'
  },

  user_preferences: {
    id: 'uuid PRIMARY KEY',
    user_id: 'uuid REFERENCES users(id)',
    preferred_study_time: 'jsonb',
    study_duration: 'int4',
    break_duration: 'int4',
    learning_style: 'varchar',
    created_at: 'timestamp DEFAULT now()',
    updated_at: 'timestamp DEFAULT now()'
  }
};

/**
 * Technology Stack Configuration
 */
export const TECH_STACK = {
  framework: {
    name: 'Next.js',
    version: '15',
    features: [
      'App Router',
      'React Server Components',
      'Server Actions',
      'Route Handlers',
      'Middleware'
    ]
  },
  
  database: {
    type: 'PostgreSQL',
    orm: 'Supabase',
    features: ['Row Level Security', 'Real-time Subscriptions']
  },

  authentication: {
    provider: 'NextAuth.js',
    strategies: ['Google OAuth', 'Email/Password']
  },

  styling: {
    frameworks: ['Tailwind CSS'],
    components: ['Shadcn UI', 'Radix UI'],
    features: ['Dark Mode', 'Responsive Design']
  },

  stateManagement: {
    client: ['TanStack Query', 'Zustand'],
    server: ['Server Components', 'Server Actions']
  },

  validation: {
    schema: 'Zod',
    types: 'TypeScript'
  }
};

/**
 * Best Practices and Conventions
 */
export const CONVENTIONS = {
  fileNaming: {
    components: 'PascalCase.tsx',
    utils: 'camelCase.ts',
    routes: 'page.tsx',
    layouts: 'layout.tsx',
    serverActions: 'actions.ts'
  },

  directoryStructure: {
    app: '/src/app/*',
    components: '/src/components/*',
    lib: '/src/lib/*',
    types: '/src/types/*',
    utils: '/src/utils/*'
  },

  coding: {
    preferServerComponents: true,
    minimizeClientComponents: true,
    useTypeSafety: true,
    implementErrorBoundaries: true,
    optimizeImages: true
  }
};

/**
 * Performance Guidelines
 */
export const PERFORMANCE = {
  optimization: [
    'Route Segments',
    'Streaming',
    'Partial Prerendering',
    'React Suspense'
  ],
  
  caching: [
    'Route Cache',
    'Router Cache',
    'Data Cache'
  ],

  loading: {
    implementation: 'loading.tsx',
    skeletons: true,
    suspense: true
  }
};

/**
 * Security Measures
 */
export const SECURITY = {
  authentication: {
    requireSession: true,
    validateTokens: true,
    handleExpiration: true
  },

  data: {
    sanitizeInput: true,
    validatePayloads: true,
    preventSQLInjection: true
  },

  api: {
    rateLimit: true,
    cors: true,
    csrfProtection: true
  }
}; 